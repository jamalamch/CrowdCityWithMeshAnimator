//
//	Created by jiadong chen
//	http://www.chenjd.me
//  用来在gpu上实现集群效果
//

#pragma kernel CSMain

//封装计算单个boid时所需要的数据
struct Boid
{
	float3 pos;
	float3 rot;
	float3 flockPos;
	float speed;
	float nearbyDis;
};

RWStructuredBuffer<Boid> boidBuffer;
Texture2D<float4> grids;

float deltaTime;
float boidsCount;

int cols;
int rows;
float gridSize;

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidBuffer[id.x];
	float3 pos = boid.pos;
	float3 rot = boid.rot;

	//separation
	float3 separation = float3(0.0, 0.0, 0.0);

	//alignment
	float3 alignment = float3(0.0, 0.0, 0.0);

	//cohesion
	float3 cohesion = boid.flockPos;
	//float3 tempCohesion = float3(0.0, 0.0, 0.0);

    float tempSpeed = 0;
	uint nearbyCount = 0;

	float ds = length(boid.pos.xz - boid.flockPos.xz);

	if(ds < boid.nearbyDis)
		separation += boid.pos - boid.flockPos;

	[loop]
	for (int i = 0; i < int(boidsCount); i++)
	{
		if (i != int(id.x))
		{
			Boid tempBoid = boidBuffer[i];
			if (length(boid.pos - tempBoid.pos) < boid.nearbyDis)
			{
				if (ds > length(tempBoid.pos.xz - boid.flockPos.xz)) {
					separation += boid.pos - tempBoid.pos;
					alignment += tempBoid.rot;

					//tempCohesion += tempBoid.pos;

					nearbyCount++;
				}
			}
		}
	}

	if (nearbyCount > 0)
	{
		alignment *= 1 / nearbyCount;
	}

	float3 direction = alignment + separation + normalize(cohesion - boid.pos);

	//if (ds < 1)
	//	boid.speed = 0;
	boid.rot = lerp(boid.rot, normalize(direction), deltaTime * 4);

	float3 targPos = boid.pos + boid.rot * boid.speed * deltaTime;

	int gridX = floor(targPos.x / 50.0);
	int gridY = floor(targPos.z / 50.0);
	if (gridX >= 0 && gridX < 20 && gridY >= 0 && gridY < 20) {
		if (grids[float2(gridX, gridY)].z == 0)
			boid.pos = targPos;
		else {
			float3 maxPosition = float3(gridX * 50, 0, gridY * 50);
			if (maxPosition.x < targPos.x && maxPosition.x >= boid.pos.x)
				targPos.x = maxPosition.x;
			else if ((maxPosition.x + 50) > targPos.x && (maxPosition.x + 50) <= boid.pos.x)
				targPos.x = max(maxPosition.x + 50, targPos.x);

			if (maxPosition.z < targPos.z && maxPosition.z >= boid.pos.z)
				targPos.z = min(maxPosition.z, targPos.z);
			if ((maxPosition.z + 50) > targPos.z && (maxPosition.z + 50) <= boid.pos.z)
				targPos.z = max(maxPosition.z + 50, targPos.z);

			boid.pos = targPos;
		}
	}
	boidBuffer[id.x] = boid;
}
